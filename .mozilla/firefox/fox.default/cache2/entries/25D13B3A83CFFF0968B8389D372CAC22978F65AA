/* globals define,console,Promise */
define(["jquery", "mustache", "text!./layout.html"], function($, Mustache, templateHtml) {
	"use strict";

	/* Commenting out Marked from our require statement since IC doesn't have it.
		Alias: "marked"
		Named variable: "Marked"
	*/

	// Content Layout constructor function.
	function ContentLayout(params) {
		this.contentItemData = params.contentItemData || {};
		this.scsData = params.scsData;
		this.contentClient = params.contentClient;
	}

	// Helper function to format a date field by locale.
	function dateToMDY(date) {
		if (!date) {
			return "";
		}

		var dateObj = new Date(date);

		var options = { year: "numeric", month: "long", day: "numeric", hour: "2-digit", minute: "2-digit" };
		var formattedDate = dateObj.toLocaleDateString("en-US", options);

		return formattedDate;
	}

	// Commenting out since IC doesn't have this
	// Helper function to parse markdown text.
	// function parseMarkdown(mdText) {
	// 	if (mdText && /^<!---mde-->\n\r/i.test(mdText)) {
	// 		mdText = mdText.replace("<!---mde-->\n\r", "");

	// 		mdText = Marked(mdText);
	// 	}

	// 	return mdText;
	// }

	// Helper function to make an additional Content REST API call to retrieve all items referenced in the data by their ID.
	function getRefItems(contentClient, ids) {
		// Calling getItems() with no â€˜idsâ€™ returns all items.
		// If no items are requested, just return a resolved Promise.
		if (ids.length === 0) {
			return Promise.resolve({});
		} else {
			return contentClient.getItems({
				ids: ids
			});
		}
	}

	// Content Layout definition.
	ContentLayout.prototype = {
		// Specify the versions of the Content REST API that are supported by the this Content Layout.
		// The value for contentVersion follows Semantic Versioning syntax.
		// This allows applications that use the content layout to pass the data through in the expected format.
		contentVersion: ">=1.0.0 <2.0.0",

		// Main rendering function:
		// - Updates the data to handle any required additional requests and support both v1.0 and v1.1 Content REST APIs
		// - Expand the Mustache template with the updated data
		// - Appends the expanded template HTML to the parentObj DOM element
		render: function(parentObj) {
			var template,
				content = $.extend({}, this.contentItemData),
				contentClient = this.contentClient,
				contentType,
				secureContent = false;

			// If used with CECS Sites, Sites will pass in context information via the scsData property.
			if (this.scsData) {
				content = $.extend(content, { scsData: this.scsData });
				contentType = content.scsData.showPublishedContent === true ? "published" : "draft";
				secureContent = content.scsData.secureContent;
			}

			// Support both v1.0 and v1.1 Content REST API response formats.
			// User-defined fields are passed through the 'data' property in v1.0 and 'fields' property in v1.1.
			var data =
			!contentClient.getInfo().contentVersion || contentClient.getInfo().contentVersion === "v1"
					? content.data
					: content.fields;

			// Massage the data so that the 'fields' property is always there.
			// The corresponding layout.html template only checks for the â€˜fieldsâ€™ property.
			if (!contentClient.getInfo().contentVersion || contentClient.getInfo().contentVersion === "v1") {
				content["fields"] = content.data;
			}

			//
			// Handle fields specific to this content type.
			//

			/* Begin Section: Date fields */
			var dateTimeFields = ["mysites-home-news_date"];

			dateTimeFields.forEach(function(currentDateTime) {
				if (data[currentDateTime]) {
					data[currentDateTime]["formated"] = dateToMDY(data[currentDateTime].value);
				}
			});
			/* End Section: Date fields */

			// We store all of the IDs of what we need here
			var referedIds = [];

			// Get the IDs of any referenced assets, we will do an additional query to retrieve these so we can render them as well.
			// If you donâ€™t want to render referenced assets, remove these block.

			/* Begin Section: Reference Lookups */
			var referenceQueue,
				referenceContentItemFields = [
					"mysites-home-news_news_eyebrow",
					"mysites-home-news_organization",
					"mysites-home-news_news_topic"
				];

			referenceContentItemFields.forEach(function(currentField) {
				// If we have values for this field...
				if (data[currentField]) {
					// So we don't repeat our code we test if the field is a multivalue (ie array)
					if (Array.isArray(data[currentField])) {
						referenceQueue = data[currentField].map(function(currentValue) {
							return currentValue.id;
						});
					} else if (data[currentField] != null) {
						// If it is not an array we make it one, just to condense code
						referenceQueue = [data[currentField].id];
					} else {
						referenceQueue = [];
					}

					// Add these to the referedIds array so we can do the additional query for all of them
					referedIds = referedIds.concat(referenceQueue);
				}
			});
			/* End Section: Reference Lookups */

			/* Begin Section: Image Generation */
			var imageQueue,
				imageContentItemFields = [
					"mysites-home-news_image_home_card",
					"mysites-home-news_image_home_feature",
					"mysites-home-news_image_article_heading_desktop",
					"mysites-home-news_image_article_heading_mobile",
					"mysites-home-news_image_search",
					"mysites-home-news_image_card_recommended"
				];

			imageContentItemFields.forEach(function(currentField) {
				// If we have values for this field...
				if (data[currentField]) {
					// So we don't repeat our code we test if the field is a multivalue (ie array)
					if (Array.isArray(data[currentField])) {
						imageQueue = data[currentField];
					} else if (data[currentField] != null) {
						// If it is not an array we make it one, just to condense code
						imageQueue = [data[currentField]];
					} else {
						imageQueue = [];
					}

					imageQueue.forEach(function(currentImage) {
						currentImage["url"] = contentClient.getRenditionURL({ id: currentImage.id });
					});
				}
			});
			/* End Section: Image Generation */

			// If any referenced items exist, fetch them before we render.
			getRefItems(contentClient, referedIds).then(function(results) {
				var items = (results && results.items) || [];

				// Support v1 bulk query.
				if (!Array.isArray(items)) {
					var newItems = [];
					Object.keys(items).forEach(function(key) {
						newItems.push(items[key]);
					});
					items = newItems;
				}

				// Store the retrieved referenced items in the data used by the template.
				items.forEach(function(item) {
					// Massage the data so that the 'fields' property is always there.
					// The corresponding layout.html template only checks for the â€˜fieldsâ€™ property.
					if (!contentClient.getInfo().contentVersion || contentClient.getInfo().contentVersion === "v1") {
						item["fields"] = item.data;
					}

					// We use a for loop here so we can exit when we get a match.
					for (let index = 0; index < referenceContentItemFields.length; index++) {
						const currentField = referenceContentItemFields[index];

						if (data[currentField]) {
							if (Array.isArray(data[currentField])) {
								// This field of the data is an array so we must figure out which item to bind to.
								var matchedItem = data[currentField].filter(function(currentValue) {
									return currentValue.id == item.id;
								});

								if (matchedItem.length > 0) {
									matchedItem["contentItem"] = item;
									break;
								}
							} else {
								// This is a single piece of data
								if (data[currentField] && data[currentField].id === item.id) {
									data[currentField]["contentItem"] = item;
									break;
								}
							}
						}
					}
				});

				try {
					// Use Mustache to expand the HTML template with the data.
					template = Mustache.render(templateHtml, content);

					// Insert the expanded template into the passed in container.
					if (template) {
						$(parentObj).append(template);
					}
				} catch (e) {
					console.error(e.stack);
				}
			});
		}
	};

	return ContentLayout;
});
-·ŒŠ‡      ]ögˆ]ög‰A!>^
.   |    :https://oradocs-corp.sites.us2.oraclecloud.com/_compdelivery/_cache_5013/MYO-News-Home-Card-Content-Layout/assets/render.js necko:classified 1 strongly-framed 1 security-info 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 request-method GET response-head HTTP/1.1 200 OK
Date: Sun, 15 Dec 2019 17:04:09 GMT
Server: Oracle-Application-Server-11g
Cache-Control: max-age=1296000
Accept-Ranges: bytes
Content-Length: 8347
Last-Modified: Fri, 13 Dec 2019 04:35:18 GMT
X-ORACLE-DMS-ECID: 005aS4LL5iW4yk4_rT5EiY0003_m0003_w
Content-Type: application/javascript
Content-Language: en
 original-response-headers Date: Sun, 15 Dec 2019 17:04:09 GMT
Server: Oracle-Application-Server-11g
Cache-Control: max-age=1296000
Accept-Ranges: bytes
Content-Length: 8347
Last-Modified: Fri, 13 Dec 2019 04:35:18 GMT
X-ORACLE-DMS-ECID: 005aS4LL5iW4yk4_rT5EiY0003_m0003_w
Keep-Alive: timeout=5, max=495
Connection: Keep-Alive
Content-Type: application/javascript
Content-Language: en
 uncompressed-len 0 net-response-time-onstart 367 net-response-time-onstop 410    ›